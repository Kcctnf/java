1.你知道HTTP协议，TCP协议，IP协议分别在哪一层吗？
   答：HTTP在应用层，针对每个应用的协议；TCP（UDP）在传输层，管理两个节点间的数据传输，负责可靠传输；IP在网络层，地址管理与路由选择；
2.Http?与https
   Http请求：请求行（方法+URL+版本号(http/1.1)），Header（属性：冒号分割的键值对） ，body
   Http响应：版本号，状态码，状态码解释（http/1.1  200 OK）
   不同点：：
   	http是明文传输，https是加密的安全传输，https需要一定的经济成本，http连接80端口，https连接443端口，http连接简单，	没有状态，https是ssl加密传输，身份认证的网络协议，相对安全。
3.UDP协议？
   特点：无连接：直到	对端的端口号和IP，无需连接，直接传输
             不可靠：没有确认机制，没有重传机制，如果因为网络故障出错，UDP不会给应用层反回任何错误的信息。
             面向数据报：不能够灵活的控制读写数据的次数和数量。
4.TCP？
   六位标志位：URG: 紧急指针是否有效
                        ACK: 确认号是否有效
                        PSH: 提示接收端应用程序立刻从TCP缓冲区把数据读走
                        RST: 对方要求重新建立连接; 我们把携带RST标识的称为复位报文段
                        SYN: 请求建立连接; 我们把携带SYN标识的称为同步报文段
                        FIN: 通知对方, 本端要关闭了, 我们称携带FIN标识的为结束报文段
   答：（1）三次握手

           ii.主机A向主机B发送TCP连接请求数据包，其中包含主机A的初始序列号。（其中报文中的同步标志位syn = 1，ACK = 0，表示这是一个TCP连接请求的报文；序号为seq = x,表明传输数据时的第一个数据字节的序号为	x）
           ii.主机B收到请求后，会发回连接却认数据包。（其中，syn = 1，ACK = 1，表示这是一个连接响应数据报文，并含主机B的初始序列号seq(B) = y,以及主机主机B对主机A初始序列号的确认号ack(B) = seq + 1 = x + 1）
           ii.主机A收到主机B的确认报文后，还需要做出确认，即发送一个序列号seq(A) = x + 1；确认号为ack(A) = seq(B) + 1 = y + 1。
        （2）四次挥手

              ii.假设主机A为客户端，主机B为服务器，其释放TCP连接过程如下
              ii.关闭客户端到服务器的连接：首先客户端A发送一个FIN，用来关闭客户端到服务器的数据传送，然后等待服务器的确认。其中终止标志位FIN = 1，序列号seq = u。
              ii.服务器收到这个FIN后，发回一个ACK，确认号为收到的序列号 + 1，u+ 1。
              ii.关闭服务器到客户端的连接也是发送一个FIN给客户端。seq = w
              ii.客户端收到FIN后，发回一个ACK确认，并将确认序号seq设置为收到序号 + 1。（首先执行关闭的一方执行主动关闭，另一方执行被动关闭）
1.String与StringBuffer的区别？
   String类是一个final类，不能被继承，不能被修改，为了提高效率，建议使用StringBuffer
 答：他们都可以储存和操作字符串，即包含多个字符的字符数据。String提供了数值不可变的字符串。然而，StringBuffer提供的字符串可以修改。StringBuffer可以用来构造动态数据。
   1.操作数量较少的字符串用String，不可修改的字符串；
   2.在单线程且操作大量字符串用StringBuilder,速度快，但线程不安全，可修改；
   3.在多线程且操作大量字符串用StringButter，线程安全，可修改。
2.讲讲数组（Array）与列表（ArrayList）的区别？分别在什么时候用？
   答：	Array可含基本数据类型和对象类型，ArrayList只能包含对象数据类型。
                Array的大小是固定的，ArrayList的大小是动态变化的。
                ArrayList提供了很多方法和特性，对于基本类型，集合会自动装箱，但是处理固定大小的基本类型的数据时，这种方式比较慢
3.请你解释什么是值传递和医用传递？
   答：值传递是对于基本类型而言的，传递的是一个副本，改变副本不会改变原表量。
          引用传递一般是对对象型数据而言的，传递的是该对象地址的一个副本，并不是源对象的本身，所以对引用对象进行操作会同时改变原来的对象，一般认为java中的传递都为值传递。

    public class Test2 {//输出为  Hello    Helloworld
       public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello ");
        System.out.println("Before change, sb = " + sb);
        changeData(sb);
        System.out.println("After changeData(n), sb = " + sb);
    }
      
       public static void changeData(StringBuffer strBuf) {
        strBuf.append("World!");
    }
}
    public class Test3 {//输出为   Hello   Hello
       public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello ");
        System.out.println("Before change, sb = " + sb);
        changeData(sb);
        System.out.println("After changeData(n), sb = " + sb);
    }
      
       public static void changeData(StringBuffer strBuf) {
           strBuf = new StringBuffer("Hi ");
           strBuf.append("World!");
    }
}   
     public class Test1 {//输出为 3   3
       public static void main(String[] args) {
        int n = 3;
        System.out.println("Before change, n = " + n);
        changeData(n);
        System.out.println("After changeData(n), n = " + n);
    }
      
       public static void changeData(int nn) {
        n = 10;
    }
}
4.为什么重写equals()方法还要重写hashCode()方法？
  答：HashMap中比较Key通常是这样子的，先求出hashCode比较其值是否相等，若相等再比较equals()方法，若相等则认为他们是相等的。若equals不相等则认为他们是不相等的。
5.map的分类及常见的情况？
   答：map下边有HashMap   TreeMap  HashTable   LinkedHashMap
   	map不容许键重复（重复了就覆盖了），但允许值重复。（1）HashMap是一个最常用的Map，它根据键的hashCode值存储数据，访问速度快，遍历是取得数据的顺序完全是随机的，HashMap最多只允许一条记录的key值为null，可以多个记录的值为null；HashMap不支持线程同步，即任意时刻可以有多个线程同时写HashMap，可能会导致数据不一致，如果需要同步的话，可以使用CurrentHashMap或者Collections的synchronizedMap()方法具有同步的能力。
（2）HashTable与hashMap类似，不允许记录键和值为null，它支持线程同步，即任意时刻只有一个线程可以写HashTable，所以写入时比较慢。（3）LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的。
6.final关键字的意义？
   答：（1）被final修饰的类不能够被继承，比如，String类。（2）对于一个final变量，一旦被初始化，将无法在被修改，如果是引用类型的变量，则 在对其初始化	之后便不能再让其指向另一个对象。（3）修饰的方法不能被覆写。
7.synchronized关键字?
   答：（1）synchronized修饰静态方法以及同步代码块的synchronized (类.class)用法锁的是类，线程想要执行对应同步代码，需要获得类锁。
          （2）synchronized修饰成员方法，线程获取的是当前调用该方法的对象实例的对象锁。
8.说一下快速失败（fail-fast）和安全失败（fail-safe）的区别？
   答：Iterator的安全失败是基于对底层集合做拷贝，因此，它不受源集合上修改的影响。java.util包下面的所有的集合类都是快速失败的，快速失败可以防止脏读。而java.util.concurrent包下面的所有的类都是安全失败的。快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常。











