1.redis的使用场景：
   博客系统
   1.做数据结构的设计
      从需求出发
   2.功能：
      1）列表页（所有人的文章按发表时间倒序排列）
      2）页表页（作者的文章）
      3）详情页（标题，作者，发表时间，正文）
      4）发表文章
   3.String  List   hash  set  zset
   4.文章  Map<String,Map<String,String>>
2.过程：
   1.根据二进制字节流解析出命令的名称（Protocol）
   2.如何根据命令的名称找到相应的对象？
      1.根据命令名称找到对应的类名称
          配置    约定俗成   command.%Command
      2.根据类名称，获取指定的对象（反射）
         1.每次命令创建一个新的对象
         2.共用同一个对象
            饿汉式    懒汉式
         3.对象池子

相比于静态属性 + 静态方法的实现  单例的好处：
  1.静态属性的生命周期是伴随着类的
       从被加载 --->  被卸载结束
       Command.class  =>  方法区 的数据

    2.什么时候类被加载？
       用到时被加载
       1.构造该类的对象2.调用该类的静态方法3.访问该类的静态属性4.Class.forName(该类)

  2.属性的生命周期是伴随着对象的
       从实例化开始 --->  垃圾回收结束
      原因： 生命周期可控，更加的安全一些（一般用属性），存储区域更加可控


3.hashs:
     hset  key  fai



改进点：
   1.改进为多线程===》引入多线程  Database
   2.连接的循环处理没有停止的条件==》找到并识别对方关闭连接的情况，跳出循环
   3.错误处理不够丰富
   4.持久化（存到磁盘/MySQL）
     存到磁盘:ObjectOutputStream o = new OnjectOutputSteam(new FileOutputStream();
     读出来:ObjectInputStream in = new ObjectInputStream(new FileInputStream());


简历：Redis/协议解析/Socket/TCP/多线程/哈希/反射/IO/单例/
功能描述：
        Jedis源码
        1.协议解析重心
        2.AOF/R..
        3.均摊哈希：不会有一次性的扩容，而是每次扩容一点点
   心得 + 改进点

测试：1.功能性
      2.性能测试
         读写效率  并发效率  存储问题